{"version":3,"sources":["components/TaskStatusList.js","components/TaskStatus.js","App.js","serviceWorker.js","index.js"],"names":["TaskStatusListEmpty","TaskStatusListItem","props","taskName","taskPriorityIndicator","taskPriorityName","className","onClick","taskId","TaskStatusList","taskLists","length","map","val","idx","key","id","action","TaskStatus","taskStatusTitle","taskStatusLists","App","useState","taskPriority","taskStatus","task","setTask","setTaskList","formState","setFormState","getTaskPriorities","taskPriorities","priorityKey","priorityName","priorityIndicator","find","obj","getTaskStatuses","taskStatuses","statusKey","statusName","handleSetTask","e","target","name","value","resetTask","handleSetTaskList","preventDefault","Math","random","toString","substr","taskTemp","taskIdTemp","findIndex","clickTaskItem","editTask","deleteTask","taskListsTemp","filter","getTaskListsBy","filterBy","filterValue","useEffect","document","title","onSubmit","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9f0fc13.chunk.js","sourcesContent":["import React from 'react';\n\nconst TaskStatusListEmpty = () => {\n  return (\n    <div>Task empty</div>\n  )\n}\n\nconst TaskStatusListItem = (props) => {\n  const taskName = props.taskName ? props.taskName : `-` ;\n  const taskPriorityIndicator = props.taskPriorityIndicator ? props.taskPriorityIndicator : `is-black`;\n  const taskPriorityName = props.taskPriorityName ? props.taskPriorityName : `-`;\n\n  return (\n    <div className=\"columns\">\n      <div className=\"column is-12\">\n        <div className=\"notification\">\n          <div className=\"columns\">\n            <div className=\"column is-12\">\n              {taskName} <span className={`tag ${taskPriorityIndicator}`}>{taskPriorityName}</span>\n            </div>\n          </div>\n          <div className=\"columns\">\n            <div className=\"column is-12\">\n              <div className=\"field is-grouped is-grouped-centered\">\n                <p className=\"control\">\n                  <button className=\"button is-small is-warning is-fullwidth\" onClick={() => props.onClick(props.taskId, 'edit')}>Edit</button>\n                </p>\n                <p className=\"control\">\n                  <button className=\"button is-small is-danger is-fullwidth\" onClick={() => props.onClick(props.taskId, 'delete')}>Delete</button>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div> \n      </div>\n    </div> \n  )\n}\n\nconst TaskStatusList = (props) => {\n  const taskLists = props.taskLists ? props.taskLists : [];\n\n  if (taskLists.length === 0) {\n    return (<div className=\"container\"><TaskStatusListEmpty /></div>)\n  }\n\n  return (\n    <div className=\"container\">\n      {\n        taskLists.map((val, idx) =>\n          <TaskStatusListItem  key={idx} taskId={val.taskId} taskName={val.taskName} taskPriorityIndicator={val.taskPriorityIndicator} taskPriorityName={val.taskPriorityName} onClick={(id, action) => props.onClick(id, action)}></TaskStatusListItem>\n        )\n      }\n    </div>\n  )\n}\n\nexport default TaskStatusList;","import React from 'react';\nimport TaskStatusList from './TaskStatusList';\n\nconst TaskStatus = (props) => {\n  const taskStatusTitle = props.taskStatusTitle ? props.taskStatusTitle : `-`;\n\n  return (\n    <article className={`panel`}>\n      <p className=\"panel-heading has-text-centered\">{taskStatusTitle}</p>\n      <div className=\"panel-block\">\n        <TaskStatusList taskLists={props.taskStatusLists} onClick={(idx, action) => props.onClick(idx, action)}></TaskStatusList>\n      </div>\n    </article> \n  )\n}\n\nexport default TaskStatus;","import React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css'\nimport './App.css'\nimport TaskStatus from './components/TaskStatus';\n\nconst App = () => {\n  const TASK_PRIORITY_LOW = 'L';\n  const TASK_PRIORITY_MEDIUM = 'M';\n  const TASK_PRIORITY_HARD = 'H';\n\n  const TASK_STATUS_NEW = 'N';\n  const TASK_STATUS_INPROGRESS = 'I';\n  const TASK_STATUS_DONE = 'D';\n\n  const INIT_FORM_STATE = 'CREATE';\n\n  const [task, setTask] = useState({ taskId: '', taskName: '', taskPriority: TASK_PRIORITY_LOW, taskStatus: TASK_STATUS_NEW });\n  const [taskLists, setTaskList] = useState([]);\n  const [formState, setFormState] = useState(INIT_FORM_STATE);\n\n  const generateUniqId = () => {\n    return '_' + Math.random().toString(36).substr(2, 9);\n  }\n  \n  const getTaskPriorities = (key) => {\n    const taskPriorities = [\n      { priorityKey: TASK_PRIORITY_LOW, priorityName: 'Low', priorityIndicator: 'is-primary' },\n      { priorityKey: TASK_PRIORITY_MEDIUM, priorityName: 'Medium', priorityIndicator: 'is-warning' },\n      { priorityKey: TASK_PRIORITY_HARD, priorityName: 'Hard', priorityIndicator: 'is-danger' },\n    ];\n\n    if (key == null) {\n      return taskPriorities;\n    }\n\n    return taskPriorities.find(obj => {\n      return obj.priorityKey === key;\n    });\n  };\n\n  const getTaskStatuses = (key) => {\n    const taskStatuses = [\n      { statusKey: TASK_STATUS_NEW, statusName: 'New' },\n      { statusKey: TASK_STATUS_INPROGRESS, statusName: 'Inprogress' },\n      { statusKey: TASK_STATUS_DONE, statusName: 'Done' },\n    ];\n\n    if (key == null) {\n      return taskStatuses;\n    }\n\n    return taskStatuses.find(obj => {\n      return obj.statusKey === key;\n    });\n  }\n\n  const handleSetTask = (e) => {\n    setTask({ \n      ...task, [e.target.name]: e.target.value \n    })\n  };\n\n  const resetTask = (e) => {\n    setTask({ taskId: '', taskName: '', taskPriority: TASK_PRIORITY_LOW, taskStatus: TASK_STATUS_NEW })\n  }\n\n  const handleSetTaskList = (e) => {\n    e.preventDefault();\n    if (formState === INIT_FORM_STATE) {\n      setTaskList([...taskLists, { taskId: generateUniqId(), taskName: task.taskName, taskPriority: task.taskPriority, taskStatus: task.taskStatus }]);\n      resetTask();\n    } else {\n      let taskTemp = [...taskLists];\n      const taskIdTemp = taskTemp.findIndex((obj) => {\n        return obj.taskId === formState;\n      })\n\n      taskTemp[taskIdTemp].taskName = task.taskName;\n      taskTemp[taskIdTemp].taskPriority = task.taskPriority;\n      taskTemp[taskIdTemp].taskStatus = task.taskStatus;\n\n      setTaskList(taskTemp);\n      resetTask();\n      setFormState(INIT_FORM_STATE);\n    }\n  }\n\n  const clickTaskItem = (taskId, action) => {\n    switch (action) {\n      case 'edit':\n        editTask(taskId);\n        break;\n\n      case 'delete':\n        deleteTask(taskId);\n        break;\n    \n      default:\n        // do nothing\n        break;\n    }\n  }\n\n  const deleteTask = (taskId) => {\n    const taskListsTemp = taskLists.filter((obj, idx) => {\n      return obj.taskId !== taskId;\n    });\n\n    setTaskList(taskListsTemp);\n    setFormState(INIT_FORM_STATE);\n  }\n\n  const editTask = (taskId) => {\n    setFormState(taskId);\n    const taskTemp = taskLists.find((obj, idx) => {\n      return obj.taskId === taskId;\n    })\n\n    setTask({ taskId: taskTemp.taskId, taskName: taskTemp.taskName, taskPriority: taskTemp.taskPriority, taskStatus: taskTemp.taskStatus })\n  }\n\n  const getTaskListsBy = (filterBy, filterValue) => {\n    let taskPriority = null;\n    return taskLists.filter((obj) => {\n      taskPriority = getTaskPriorities(obj.taskPriority);\n      obj.taskPriorityName = taskPriority.priorityName;\n      obj.taskPriorityIndicator = taskPriority.priorityIndicator;\n      return obj[filterBy] === filterValue;\n    })\n  }\n\n  useEffect(() => {\n    document.title = `New (${getTaskListsBy('taskStatus', TASK_STATUS_NEW).length}) | \n      Inprogress (${getTaskListsBy('taskStatus', TASK_STATUS_INPROGRESS).length}) | \n      Done (${getTaskListsBy('taskStatus', TASK_STATUS_DONE).length})`;\n  });\n  \n  return (\n    <div className=\"container\">\n      <form onSubmit={handleSetTaskList}>\n        <div className=\"columns is-mobile\">\n          <div className=\"column column is-three-fifths is-offset-one-fifth\">\n            <p className=\"has-text-centered is-size-5 has-text-weight-medium\">{formState === INIT_FORM_STATE ? `Create Task` : `Update Task ${task.taskName}`}</p>\n          </div>\n        </div>\n        <div className=\"columns is-mobile\">\n          <div className=\"column is-three-fifths is-offset-one-fifth\">\n            <div className=\"field is-horizontal\">\n              <div className=\"field-label is-normal\">\n                <label className=\"label\">Task Name</label>\n              </div>\n              <div className=\"field-body\">\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <input type=\"text\" className=\"input\" value={task.taskName} name=\"taskName\" onChange={handleSetTask} />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"field is-horizontal\">\n              <div className=\"field-label is-normal\">\n                <label className=\"label\">Priority</label>\n              </div>\n              <div className=\"field-body\">\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <div className=\"select\">\n                      <select name=\"taskPriority\" value={task.taskPriority} onChange={handleSetTask}>\n                        {\n                          getTaskPriorities().map((val, idx) =>\n                            <option key={val.priorityKey} value={val.priorityKey}>{val.priorityName}</option>\n                          )\n                        }\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"field is-horizontal\">\n              <div className=\"field-label is-normal\">\n                <label className=\"label\">Status</label>\n              </div>\n              <div className=\"field-body\">\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <div className=\"select\">\n                      <select name=\"taskStatus\" value={task.taskStatus} onChange={handleSetTask}>\n                        {\n                          getTaskStatuses().map((val, idx) =>\n                            <option key={val.statusKey} value={val.statusKey}>{val.statusName}</option>\n                          )\n                        }\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns is-mobile\">\n          <div className=\"column is-three-fifths is-offset-one-fifth\">\n            <div className=\"field is-grouped is-grouped-centered\">\n                <div className=\"control\">\n                  <button className=\"button is-primary\" onClick={handleSetTaskList}>Save</button>\n                </div>\n                <div className=\"control\">\n                  <button className=\"button is-link is-light\">Cancel</button>\n                </div>\n              </div>\n          </div>\n        </div>\n      </form>\n      <div className=\"columns\">\n        <div className=\"column\">\n          <TaskStatus \n            taskStatusLists={getTaskListsBy(`taskStatus`, TASK_STATUS_NEW)} \n            taskStatusTitle={getTaskStatuses(TASK_STATUS_NEW).statusName} \n            onClick={(idx, action) => clickTaskItem(idx, action)} />\n        </div>\n        <div className=\"column\">\n          <TaskStatus \n            taskStatusLists={getTaskListsBy(`taskStatus`, TASK_STATUS_INPROGRESS)} \n            taskStatusTitle={getTaskStatuses(TASK_STATUS_INPROGRESS).statusName} \n            onClick={(idx, action) => clickTaskItem(idx, action)} />\n        </div>\n        <div className=\"column\">\n          <TaskStatus \n            taskStatusLists={getTaskListsBy(`taskStatus`, TASK_STATUS_DONE)} \n            taskStatusTitle={getTaskStatuses(TASK_STATUS_DONE).statusName}\n            onClick={(idx, action) => clickTaskItem(idx, action)} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}